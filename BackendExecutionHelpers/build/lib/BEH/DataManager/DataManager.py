


class DataManager:

    def __init__(self):

        self._data = {}


    def create_namespace(self, namespace):
        if namespace in self._data:
            # do nothing?
            pass
        else:
            self._data[namespace] = {}


    def if_namespace_exists(self, namespace):
        if namespace in self._data:
            return True
        else:
            return False


    def get_available_namespaces(self):
        return list(self._data.keys())

    def add_data_to_namespace(self, namespace, dataDict):
        """
        add a dictionary of {varname: datavalue} to the data dictionary

        this is actually our new standard, the varname is generated by the loaded

        :param namespace:
        :param dataDict:
        :return:
        """

        if not self.if_namespace_exists(namespace):
            self.create_namespace(namespace)

        self._data[namespace].update(dataDict)


